//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""FirstBinding"",
            ""id"": ""063eae5c-17c3-46ac-92ec-34b2b2a2bf18"",
            ""actions"": [
                {
                    ""name"": ""AD"",
                    ""type"": ""Button"",
                    ""id"": ""f652079a-5bad-4be0-9391-f7deff66259a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""49b87eaf-ad0e-4c71-85a0-fb89f5a67c7c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""13a54066-0333-4eb2-89c5-556af0f6c1cf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""efbe0d20-a6da-4fec-af18-e4382730987d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FirstBinding
        m_FirstBinding = asset.FindActionMap("FirstBinding", throwIfNotFound: true);
        m_FirstBinding_AD = m_FirstBinding.FindAction("AD", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FirstBinding
    private readonly InputActionMap m_FirstBinding;
    private List<IFirstBindingActions> m_FirstBindingActionsCallbackInterfaces = new List<IFirstBindingActions>();
    private readonly InputAction m_FirstBinding_AD;
    public struct FirstBindingActions
    {
        private @Controls m_Wrapper;
        public FirstBindingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @AD => m_Wrapper.m_FirstBinding_AD;
        public InputActionMap Get() { return m_Wrapper.m_FirstBinding; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstBindingActions set) { return set.Get(); }
        public void AddCallbacks(IFirstBindingActions instance)
        {
            if (instance == null || m_Wrapper.m_FirstBindingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FirstBindingActionsCallbackInterfaces.Add(instance);
            @AD.started += instance.OnAD;
            @AD.performed += instance.OnAD;
            @AD.canceled += instance.OnAD;
        }

        private void UnregisterCallbacks(IFirstBindingActions instance)
        {
            @AD.started -= instance.OnAD;
            @AD.performed -= instance.OnAD;
            @AD.canceled -= instance.OnAD;
        }

        public void RemoveCallbacks(IFirstBindingActions instance)
        {
            if (m_Wrapper.m_FirstBindingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFirstBindingActions instance)
        {
            foreach (var item in m_Wrapper.m_FirstBindingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FirstBindingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FirstBindingActions @FirstBinding => new FirstBindingActions(this);
    public interface IFirstBindingActions
    {
        void OnAD(InputAction.CallbackContext context);
    }
}
